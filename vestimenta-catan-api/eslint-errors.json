[{"filePath":"C:\\Users\\FelipeArce\\Desktop\\vestimenta-catan\\vestimenta-catan-api\\test\\app.e2e-spec.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":23,"column":11,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":26,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":23,"column":11,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":25,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":23,"column":11,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":24,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .get on an `error` typed value.","line":24,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":24,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .expect on an `error` typed value.","line":25,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":25,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .expect on an `error` typed value.","line":26,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":26,"endColumn":14}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Test, TestingModule } from '@nestjs/testing';\r\nimport { INestApplication } from '@nestjs/common';\r\nimport * as request from 'supertest';\r\nimport { AppModule } from './../src/app.module';\r\n\r\ndescribe('AppController (e2e)', () => {\r\n  let app: INestApplication;\r\n\r\n  beforeEach(async () => {\r\n    const moduleFixture: TestingModule = await Test.createTestingModule({\r\n      imports: [AppModule],\r\n    }).compile();\r\n\r\n    app = moduleFixture.createNestApplication();\r\n    await app.init();\r\n  });\r\n\r\n  afterAll(async () => {\r\n    await app.close();\r\n  });\r\n\r\n  it('/ (GET)', async (): Promise<void> => {\r\n    await request(app.getHttpServer())\r\n      .get('/')\r\n      .expect(200)\r\n      .expect('Hello World!');\r\n  });\r\n});\r\n","usedDeprecatedRules":[]}]
